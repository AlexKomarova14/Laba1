#!/usr/bin/env bash
set -euo pipefail

echo "===================================================================="
echo "üéØ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LOG_CLEANER"
echo "===================================================================="
echo "–í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
echo ""

# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò –ò –§–£–ù–ö–¶–ò–ò
# ============================================================================

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
LOG_CLEANER="$SCRIPT_DIR/log_cleaner.sh"
TEST_BASE="/tmp/log_cleaner_final_test_$$"
RESULTS_LOG="$TEST_BASE/test_results.log"

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É
mkdir -p "$TEST_BASE"
echo "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: $TEST_BASE" | tee "$RESULTS_LOG"

# üîπ –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_header() {
    echo ""
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üß™ $1"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "$1" >> "$RESULTS_LOG"
}

print_step() {
    echo "  üîπ $1" | tee -a "$RESULTS_LOG"
}

print_success() {
    echo "  ‚úÖ –£–°–ü–ï–•: $1" | tee -a "$RESULTS_LOG"
}

print_error() {
    echo "  ‚ùå –û–®–ò–ë–ö–ê: $1" | tee -a "$RESULTS_LOG"
}

print_info() {
    echo "  üìã –ò–ù–§–û: $1" | tee -a "$RESULTS_LOG"
}

show_files() {
    local dir="$1"
    local description="$2"
    echo "  üìÅ $description:" | tee -a "$RESULTS_LOG"
    if [ -d "$dir" ]; then
        find "$dir" -type f -exec ls -lh {} \; 2>/dev/null | while read -r line; do
            echo "      $line" | tee -a "$RESULTS_LOG"
        done
        local file_count
        file_count=$(find "$dir" -type f 2>/dev/null | wc -l | tr -d ' ')
        echo "      –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: $file_count" | tee -a "$RESULTS_LOG"
    else
        echo "      –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" | tee -a "$RESULTS_LOG"
    fi
}

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
check_main_script() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞..."
    if [ ! -f "$LOG_CLEANER" ]; then
        print_error "–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: $LOG_CLEANER"
        exit 1
    fi
    
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è..."
    if [ ! -x "$LOG_CLEANER" ]; then
        chmod +x "$LOG_CLEANER"
        print_info "–ü—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
    fi
    
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞..."
    if bash -n "$LOG_CLEANER"; then
        print_success "–°–∏–Ω—Ç–∞–∫—Å–∏—Å —Å–∫—Ä–∏–ø—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
    else
        print_error "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ"
        exit 1
    fi
}

# ============================================================================
# –¢–ï–°–¢ 1: –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ - –ê–†–•–ò–í–ê–¶–ò–Ø
# ============================================================================

test_basic_functionality() {
    local test_dir="$TEST_BASE/test1"
    mkdir -p "$test_dir/log" "$test_dir/backup"
    
    print_header "–¢–ï–°–¢ 1: –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨"
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
    for i in {1..5}; do
        dd if=/dev/zero of="$test_dir/log/old_file_$i.log" bs=1M count=30 status=none 2>/dev/null
        echo "–°—Ç–∞—Ä—ã–π –ª–æ–≥-—Ñ–∞–π–ª $i" >> "$test_dir/log/old_file_$i.log"
    done
    
    for i in {1..3}; do
        dd if=/dev/zero of="$test_dir/log/new_file_$i.log" bs=1M count=20 status=none 2>/dev/null
        echo "–ù–æ–≤—ã–π –ª–æ–≥-—Ñ–∞–π–ª $i" >> "$test_dir/log/new_file_$i.log"
    done
    
    show_files "$test_dir/log" "–§–∞–π–ª—ã –¥–æ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏"
    
    print_step "–ó–∞–ø—É—Å–∫ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Å –ø–æ—Ä–æ–≥–æ–º 60%..."
    cd "$test_dir"
    "$LOG_CLEANER" "./log" 60
    
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."
    show_files "$test_dir/log" "–§–∞–π–ª—ã –ø–æ—Å–ª–µ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏"
    show_files "$test_dir/backup" "–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã"
    
    local remaining_files
    remaining_files=$(find "$test_dir/log" -type f 2>/dev/null | wc -l | tr -d ' ')
    local archive_count
    archive_count=$(find "$test_dir/backup" -name "*.tar.gz" 2>/dev/null | wc -l | tr -d ' ')
    
    if [ "$archive_count" -gt 0 ] && [ "$remaining_files" -lt 8 ]; then
        print_success "–ê—Ä—Ö–∏–≤–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        return 0
    else
        print_error "–ê—Ä—Ö–∏–≤–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        return 1
    fi
}

# ============================================================================
# –¢–ï–°–¢ 2: –ê–†–•–ò–í–ê–¶–ò–Ø –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø
# ============================================================================

test_no_archive_needed() {
    local test_dir="$TEST_BASE/test2"
    mkdir -p "$test_dir/log" "$test_dir/backup"
    
    print_header "–¢–ï–°–¢ 2: –ê–†–•–ò–í–ê–¶–ò–Ø –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø"
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤..."
    
    for i in {1..2}; do
        dd if=/dev/zero of="$test_dir/log/small_file_$i.log" bs=1M count=10 status=none 2>/dev/null
        echo "–ú–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª $i" >> "$test_dir/log/small_file_$i.log"
    done
    
    show_files "$test_dir/log" "–§–∞–π–ª—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π"
    
    print_step "–ó–∞–ø—É—Å–∫ —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ä–æ–≥–æ–º (90%) - –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å..."
    cd "$test_dir"
    "$LOG_CLEANER" "./log" 90
    
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."
    show_files "$test_dir/log" "–§–∞–π–ª—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"
    show_files "$test_dir/backup" "–ê—Ä—Ö–∏–≤—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç–æ)"
    
    local remaining_files
    remaining_files=$(find "$test_dir/log" -type f 2>/dev/null | wc -l | tr -d ' ')
    local archive_count
    archive_count=$(find "$test_dir/backup" -name "*.tar.gz" 2>/dev/null | wc -l | tr -d ' ')
    
    if [ "$archive_count" -eq 0 ] && [ "$remaining_files" -eq 2 ]; then
        print_success "–ê—Ä—Ö–∏–≤–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–∫–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å)"
        return 0
    else
        print_error "–ê—Ä—Ö–∏–≤–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞"
        return 1
    fi
}

# ============================================================================
# –¢–ï–°–¢ 3: –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
# ============================================================================

test_error_handling() {
    print_header "–¢–ï–°–¢ 3: –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö"
    
    print_step "–¢–µ—Å—Ç 3.1: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è..."
    local output_file="$TEST_BASE/error_output.log"
    local exit_code=0
    
    "$LOG_CLEANER" "/nonexistent/directory/12345" 50 > "$output_file" 2>&1 || exit_code=$?
    
    if [ "$exit_code" -ne 0 ]; then
        print_success "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        print_error "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –≤—ã–∑–≤–∞–ª–∞ –æ—à–∏–±–∫—É"
    fi
    
    print_step "–¢–µ—Å—Ç 3.2: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä–æ–≥..."
    "$LOG_CLEANER" "/tmp" 150 > "$output_file" 2>&1 || exit_code=$?
    
    if [ "$exit_code" -ne 0 ]; then
        print_success "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É"
    fi
    
    return 0
}

# ============================================================================
# –¢–ï–°–¢ 4: –ü–†–û–í–ï–†–ö–ê –ê–†–•–ò–í–ê
# ============================================================================

test_archive_validation() {
    local test_dir="$TEST_BASE/test4"
    mkdir -p "$test_dir/log" "$test_dir/backup"
    
    print_header "–¢–ï–°–¢ 4: –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –ê–†–•–ò–í–ê"
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º..."
    
    for i in {1..3}; do
        echo "–¢–ï–°–¢–û–í–û–ï_–°–û–î–ï–†–ñ–ò–ú–û–ï_$i" > "$test_dir/log/test_file_$i.log"
        dd if=/dev/zero bs=1M count=5 status=none >> "$test_dir/log/test_file_$i.log" 2>/dev/null
    done
    
    show_files "$test_dir/log" "–§–∞–π–ª—ã –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏"
    
    print_step "–ó–∞–ø—É—Å–∫ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏..."
    cd "$test_dir"
    "$LOG_CLEANER" "./log" 1
    
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞..."
    local archive_file
    archive_file=$(find "$test_dir/backup" -name "*.tar.gz" | head -1)
    
    if [ -n "$archive_file" ]; then
        print_info "–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: $(basename "$archive_file")"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏–≤–∞
        if tar -tzf "$archive_file" >/dev/null 2>&1; then
            print_success "–ê—Ä—Ö–∏–≤ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            local extract_dir="$test_dir/extracted"
            mkdir -p "$extract_dir"
            tar -xzf "$archive_file" -C "$extract_dir"
            
            local valid_files=0
            for i in {1..3}; do
                if [ -f "$extract_dir/test_file_$i.log" ]; then
                    if head -1 "$extract_dir/test_file_$i.log" | grep -q "–¢–ï–°–¢–û–í–û–ï_–°–û–î–ï–†–ñ–ò–ú–û–ï_$i"; then
                        ((valid_files++))
                    fi
                fi
            done
            
            if [ "$valid_files" -eq 3 ]; then
                print_success "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                return 0
            else
                print_error "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É"
                return 1
            fi
        else
            print_error "–ê—Ä—Ö–∏–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
            return 1
        fi
    else
        print_error "–ê—Ä—Ö–∏–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω"
        return 1
    fi
}

# ============================================================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# ============================================================================

main() {
    echo "–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: $(date)" | tee -a "$RESULTS_LOG"
    echo "–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç: $LOG_CLEANER" | tee -a "$RESULTS_LOG"
    echo "" | tee -a "$RESULTS_LOG"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    check_main_script
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    local tests_passed=0
    local tests_total=4
    
    if test_basic_functionality; then ((tests_passed++)); fi
    if test_no_archive_needed; then ((tests_passed++)); fi
    if test_error_handling; then ((tests_passed++)); fi
    if test_archive_validation; then ((tests_passed++)); fi
    
    # –ò—Ç–æ–≥–∏
    echo ""
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: $tests_passed/$tests_total" | tee -a "$RESULTS_LOG"
    echo "–õ–æ–≥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: $RESULTS_LOG" | tee -a "$RESULTS_LOG"
    
    if [ "$tests_passed" -eq "$tests_total" ]; then
        echo ""
        echo "üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!"
        echo "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞—â–∏—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã!"
        echo ""
        echo "üìã –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫:"
        echo "   ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏"
        echo "   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        echo "   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π"
        echo "   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤"
    else
        echo ""
        echo "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ —Å–∫—Ä–∏–ø—Ç–∞!"
        echo "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ—Ç–ª–∞–¥–∫—É –ø–µ—Ä–µ–¥ –∑–∞—â–∏—Ç–æ–π."
    fi
    
    echo ""
    echo "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã..."
    rm -rf "$TEST_BASE"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ —É—Å–ø–µ—Ö–∞/–æ—à–∏–±–∫–∏
    if [ "$tests_passed" -eq "$tests_total" ]; then
        exit 0
    else
        exit 1
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
cleanup() {
    echo ""
    echo "–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û—á–∏—Å—Ç–∫–∞..."
    rm -rf "$TEST_BASE"
    exit 1
}

trap cleanup INT TERM

# üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
main
